/**
 * Provide ability to add additional renderers in raw html string format
 *
 * @param {string|Record<string, (item: object, selectionSection?: boolean, inputValue?: string) => string>} name
 * @param {(item: object, selectionSection?: boolean, inputValue?: string) => string} rendererFn
 */
export function addRenderer(name: string | Record<string, (item: object, selectionSection?: boolean, inputValue?: string) => string>, rendererFn: (item: object, selectionSection?: boolean, inputValue?: string) => string): void;
export const config: import("./settings.js").Settings;
export default Svelecte;
type Svelecte = {
    $on?(type: string, callback: (e: any) => void): () => void;
    $set?(props: Partial<{
        name?: string;
        inputId?: string;
        required?: boolean;
        disabled?: boolean;
        options?: any;
        optionResolver?: (options: any, selectedKeys: Set<any>) => any[];
        valueField?: string | null;
        labelField?: string | null;
        groupLabelField?: string;
        groupItemsField?: string;
        disabledField?: string;
        placeholder?: string;
        searchable?: boolean;
        clearable?: boolean;
        renderer?: string | ((item: any, selectionSection?: boolean | undefined, inputValue?: string | undefined) => string);
        disableHighlight?: boolean;
        highlightFirstItem?: boolean;
        selectOnTab?: boolean | "select-navigate";
        resetOnBlur?: boolean;
        resetOnSelect?: boolean;
        closeAfterSelect?: string | boolean;
        deselectMode?: "native" | "toggle" | "none";
        dndzone?: Function;
        strictMode?: boolean;
        multiple?: boolean;
        max?: number;
        collapseSelection?: "blur" | "always" | null;
        keepSelectionInList?: boolean | "auto";
        creatable?: boolean;
        creatablePrefix?: string;
        allowEditing?: boolean;
        keepCreated?: boolean;
        delimiter?: string;
        createFilter?: (inputValue: string) => boolean;
        createHandler?: (prop: {
            inputValue: string;
            valueField: string;
            labelField: string;
            prefix: string;
        }) => any;
        fetch?: string | null;
        fetchProps?: any;
        fetchMode?: "init" | "auto";
        fetchCallback?: Function;
        fetchResetOnBlur?: boolean;
        fetchDebounceTime?: number;
        minQuery?: number;
        lazyDropdown?: boolean;
        virtualList?: boolean;
        vlItemSize?: number;
        searchProps?: SearchProps | null;
        class?: any;
        i18n?: any;
        value?: any;
        readSelection?: any;
        valueAsObject?: boolean;
        parentValue?: string | number | null | undefined;
        emitValues?: boolean;
        onChange?: Function;
        onFocus?: Function;
        onBlur?: Function;
        onCreateOption?: Function;
        onCreateFail?: Function;
        onEnterKey?: Function;
        onFetch?: Function;
        onFetchError?: Function;
        onInvalidValue?: Function;
        prepend?: Snippet<[]> | undefined;
        collapsedSelection?: Snippet<[selectedOptions: any[], i18n: I18nObject]>;
        selection?: Snippet<[selectedOptions: any[], bindItem: Function]>;
        clearIcon?: Snippet<[selectedOptions: any[], input_value: string]>;
        toggleIcon?: Snippet<[dropdownShow: boolean]>;
        append?: Snippet<[]> | undefined;
        listHeader?: Snippet<[]> | undefined;
        option?: Snippet<[option: any, inputValue: string]>;
        createRow?: Snippet<[isCreating: boolean, inputValue: string, i18n: I18nObject]>;
        positionResolver?: Function;
        anchor_element?: string | null;
        controlClass?: string | null;
        dropdownClass?: string | null;
        optionClass?: string | null;
    }>): void;
} & {
    focus: () => void;
    setSelection: (selection: any, triggerChangeEvent: any) => void;
    getSelection: (onlyValues: any) => any;
    refetchWith: (value: string | number | any[]) => void;
};
declare const Svelecte: import("svelte").Component<{
    name?: string;
    inputId?: string;
    required?: boolean;
    disabled?: boolean;
    options?: Array<any> | object;
    optionResolver?: (options: any, selectedKeys: Set<any>) => object[];
    valueField?: string | null;
    labelField?: string | null;
    groupLabelField?: string;
    groupItemsField?: string;
    disabledField?: string;
    placeholder?: string;
    searchable?: boolean;
    clearable?: boolean;
    renderer?: ((item: object, selectionSection?: boolean, inputValue?: string) => string) | string;
    disableHighlight?: boolean;
    highlightFirstItem?: boolean;
    selectOnTab?: boolean | "select-navigate";
    resetOnBlur?: boolean;
    resetOnSelect?: boolean;
    closeAfterSelect?: string | boolean;
    deselectMode?: "native" | "toggle" | "none";
    dndzone?: Function;
    strictMode?: boolean;
    multiple?: boolean;
    max?: number;
    collapseSelection?: "blur" | "always" | null;
    keepSelectionInList?: boolean | "auto";
    creatable?: boolean;
    creatablePrefix?: string;
    allowEditing?: boolean;
    keepCreated?: boolean;
    delimiter?: string;
    createFilter?: (inputValue: string) => boolean;
    createHandler?: (prop: {
        inputValue: string;
        valueField: string;
        labelField: string;
        prefix: string;
    }) => (Promise<object> | object);
    fetch?: string | null;
    fetchProps?: object;
    fetchMode?: "auto" | "init";
    fetchCallback?: Function;
    fetchResetOnBlur?: boolean;
    fetchDebounceTime?: number;
    minQuery?: number;
    lazyDropdown?: boolean;
    virtualList?: boolean;
    vlItemSize?: number;
    searchProps?: import("./utils/list.js").SearchProps | null;
    class?: string | any[] | object;
    i18n?: object;
    value?: any[] | string | number | object | null;
    readSelection?: object | object[] | null;
    valueAsObject?: boolean;
    parentValue?: string | number | null | undefined;
    emitValues?: boolean;
    onChange?: Function;
    onFocus?: Function;
    onBlur?: Function;
    onCreateOption?: Function;
    onCreateFail?: Function;
    onEnterKey?: Function;
    onFetch?: Function;
    onFetchError?: Function;
    onInvalidValue?: Function;
    prepend?: import("svelte").Snippet | undefined;
    collapsedSelection?: import("svelte").Snippet<[selectedOptions: object[], i18n: import("./settings.js").I18nObject]>;
    selection?: import("svelte").Snippet<[selectedOptions: object[], bindItem: Function]>;
    clearIcon?: import("svelte").Snippet<[selectedOptions: object[], input_value: string]>;
    toggleIcon?: import("svelte").Snippet<[dropdownShow: boolean]>;
    append?: import("svelte").Snippet | undefined;
    listHeader?: import("svelte").Snippet | undefined;
    option?: import("svelte").Snippet<[option: object, inputValue: string]>;
    createRow?: import("svelte").Snippet<[isCreating: boolean, inputValue: string, i18n: import("./settings.js").I18nObject]>;
    positionResolver?: Function;
    anchor_element?: string | null;
    controlClass?: string | null;
    dropdownClass?: string | null;
    optionClass?: string | null;
}, {
    focus: () => void;
    setSelection: (selection: any, triggerChangeEvent: any) => void;
    getSelection: (onlyValues: any) => any;
    refetchWith: (value: string | number | any[]) => void;
}, "value" | "readSelection">;
